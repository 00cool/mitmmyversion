"""
This module handles the import of mitmproxy flows generated by old versions.
"""
from __future__ import absolute_import, print_function, division

import six

from netlib import version


def convert_013_014(data):
    data[b"request"][b"first_line_format"] = data[b"request"].pop(b"form_in")
    data[b"request"][b"http_version"] = b"HTTP/" + ".".join(str(x) for x in data[b"request"].pop(b"httpversion")).encode()
    data[b"response"][b"http_version"] = b"HTTP/" + ".".join(str(x) for x in data[b"response"].pop(b"httpversion")).encode()
    data[b"response"][b"status_code"] = data[b"response"].pop(b"code")
    data[b"response"][b"body"] = data[b"response"].pop(b"content")
    data[b"server_conn"].pop(b"state")
    data[b"server_conn"][b"via"] = None
    data[b"version"] = (0, 14)
    return data


def convert_014_015(data):
    data[b"version"] = (0, 15)
    return data


def convert_015_016(data):
    for m in (b"request", b"response"):
        if b"body" in data[m]:
            data[m][b"content"] = data[m].pop(b"body")
    if b"msg" in data[b"response"]:
        data[b"response"][b"reason"] = data[b"response"].pop(b"msg")
    data[b"request"].pop(b"form_out", None)
    data[b"version"] = (0, 16)
    return data


def convert_016_017(data):
    data[b"server_conn"][b"peer_address"] = None
    data[b"version"] = (0, 17)
    return data


def convert_017_018(data):
    if not six.PY2:
        # Python 2 versions of mitmproxy did not support serializing unicode.
        def dict_keys_to_str(o):
            if isinstance(o, dict):
                return {k.decode(): dict_keys_to_str(v) for k, v in o.items()}
            else:
                return o
        data = dict_keys_to_str(data)

        def dict_vals_to_str(o, decode):
            for k, v in decode.items():
                if not o or k not in o:
                    continue
                if v is True:
                    o[k] = o[k].decode()
                else:
                    dict_vals_to_str(o[k], v)
        dict_vals_to_str(data, {
            "type": True,
            "id": True,
            "request": {
                "first_line_format": True
            },
            "error": {
                "msg": True
            }
        })

    data["server_conn"]["ip_address"] = data["server_conn"].pop("peer_address")
    data["version"] = (0, 18)
    return data


converters = {
    (0, 13): convert_013_014,
    (0, 14): convert_014_015,
    (0, 15): convert_015_016,
    (0, 16): convert_016_017,
    (0, 17): convert_017_018,
}


def migrate_flow(flow_data):
    while True:
        flow_version = tuple(flow_data.get(b"version", flow_data.get("version")))
        if flow_version[:2] == version.IVERSION[:2]:
            break
        elif flow_version[:2] in converters:
            flow_data = converters[flow_version[:2]](flow_data)
        else:
            v = ".".join(str(i) for i in flow_version)
            raise ValueError(
                "{} cannot read files serialized with version {}.".format(version.MITMPROXY, v)
            )
    return flow_data
